<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent">
  <Style TargetType="{x:Type ToggleButton}" x:Key="RecentItemsPinButton">
    <Setter Property="Width" Value="20"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="border" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}" BorderBrush="{DynamicResource TransparentBrush}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch">
            <Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
              <Grid Height="Auto">
                <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed">
                  <Rectangle.Fill>
                    <RadialGradientBrush Center="0.503,1" GradientOrigin="0.503,1" RadiusY="0.202">
                      <GradientStop Color="#7FFFFFFF" Offset="0"/>
                      <GradientStop Offset="1"/>
                    </RadialGradientBrush>
                  </Rectangle.Fill>
                </Rectangle>
                <Grid x:Name="stackPanel" Width="Auto" Height="Auto">
                  <Image x:Name="iconImage" HorizontalAlignment="Center" Stretch="None" VerticalAlignment="Center" Source="/NuGenBioChem;component/Images/Unpin.png" RenderOptions.BitmapScalingMode="NearestNeighbor" SnapsToDevicePixels="True" UseLayoutRounding="True"/>
                  <Image Visibility="Collapsed" x:Name="iconImageChecked" HorizontalAlignment="Center" Stretch="None" VerticalAlignment="Center" Source="/NuGenBioChem;component/Images/Pin.png" RenderOptions.BitmapScalingMode="NearestNeighbor" SnapsToDevicePixels="True" UseLayoutRounding="True"/>
                </Grid>
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Visibility" TargetName="iconImage" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="iconImageChecked" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
              <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
              <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsPressed" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
              <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
              <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
              <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid Height="36">
            <ToggleButton Style="{StaticResource RecentItemsPinButton}" IsChecked="{Binding IsPinned, Mode=TwoWay}" HorizontalAlignment="Right" Height="36" Width="22"/>
            <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Margin="0,0,23,0" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
              <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="1" Background="{DynamicResource TransparentBrush}">
                <ContentPresenter/>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
              <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
              <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
              <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
            </Trigger>
        <Trigger Property="IsMouseOver" Value="True" SourceName="border">
              <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
              <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
              <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
          
        </ControlTemplate>
      </Setter.Value>
    </Setter>            
  </Style>
</ResourceDictionary>