<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:NuGenBioChem.Controls" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent" mc:Ignorable="d">
  <Style TargetType="{x:Type Button}" x:Key="UndoInnerButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border BorderBrush="Transparent" Background="Transparent" BorderThickness="1">
              <Border x:Name="leftBorder" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="1,0,0,1" Height="Auto" d:LayoutOverrides="Width, Height">
                <ContentPresenter/>
               </Border>
             </Border>
             <ControlTemplate.Triggers>
             
                <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" TargetName="leftBorder" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
              <Setter Property="Background" TargetName="leftBorder" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
            </MultiTrigger>
        <Trigger Property="IsPressed" Value="True">
              <Setter
            Property="Background" TargetName="leftBorder" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
              <Setter
            Property="BorderBrush" TargetName="leftBorder" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
                        </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>		
    </Setter.Value> 	
  </Setter>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsHitTestVisible" Value="True"/>
  </Style>
  <Style TargetType="{x:Type Controls:UndoButton}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#FF878787"/>
      </Trigger>
    </Style.Triggers>
  <Setter Property="ItemTemplate">
    <Setter.Value>
      <DataTemplate>
        <TextBlock Text="{Binding Name}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
      </DataTemplate>
    </Setter.Value>
  </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Controls:UndoButton}">
          <ControlTemplate.Resources>
            <ResourceDictionary>
              <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}"/>    		
        </ResourceDictionary>				     	
      </ControlTemplate.Resources>
          <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="1" Width="32" HorizontalAlignment="Right" Height="22">
            <Grid Height="Auto">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="12"/>
              </Grid.ColumnDefinitions>
              
                
                  
                <Button x:Name="PART_LeftButton" Style="{StaticResource UndoInnerButton}" HorizontalAlignment="Stretch" Margin="-1,-1,-1,-1" Width="Auto" d:LayoutOverrides="Height" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}">
                  <Image x:Name="iconImage" Source="{TemplateBinding Icon}" Width="16" Height="16" Stretch="None" IsHitTestVisible="False"/>			        				
            </Button>
              
              <Border x:Name="rightBorder" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="0,1,1,0" Height="Auto" d:LayoutOverrides="Width, Height" Grid.Column="1" Margin="1,0,0,0">
                <Grid x:Name="grid1" Margin="0">
                  <Path Data="M0,0L2,0 1,1z" Height="4" Margin="0" Stretch="Fill" Stroke="{x:Null}" VerticalAlignment="Center" Width="7" HorizontalAlignment="Center" StrokeLineJoin="Round" StrokeThickness="0" Fill="{TemplateBinding Foreground}"/>
                  <ToggleButton x:Name="PART_ToggleButton" Content="ToggleButton" Margin="-3,-2,-2,-2" d:LayoutOverrides="Width, Height" Opacity="0" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Grid>
              </Border>
              <Path x:Name="path" Data="M0,0L0,1" Fill="{x:Null}" HorizontalAlignment="Right" Margin="0,0,-1,0" StrokeStartLineCap="Flat" Stretch="Fill" StrokeEndLineCap="Flat" Stroke="{DynamicResource TransparentBrush}" StrokeThickness="1" StrokeMiterLimit="10" StrokeLineJoin="Miter" VerticalAlignment="Top"/>
              <Popup PlacementTarget="{Binding ElementName=PART_LeftButton, Mode=OneWay}" AllowsTransparency="True" PopupAnimation="Fade" StaysOpen="False" IsOpen="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="500">
                <Grid>
                  <Grid x:Name="grid" Height="Auto" Width="Auto" MaxWidth="315">
                    <Grid.Background>
                      <SolidColorBrush/>
                    </Grid.Background>
                    <Border Height="Auto" Width="Auto" BorderThickness="1" CornerRadius="2" Background="White" BorderBrush="{DynamicResource ButtonBorderBrush}" Margin="0,0,3,3" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment, Width, Height" MaxHeight="800">
                      <Border.Effect>
                        <DropShadowEffect ShadowDepth="3"/>
                      </Border.Effect>
                      <Grid>
                        <ScrollViewer Margin="0,0,0,20" MaxHeight="700" VerticalScrollBarVisibility="Auto">
                          <StackPanel Margin="1,0,1,0" Width="Auto" IsItemsHost="True"/>
                        </ScrollViewer>
                        <Border HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Bottom" BorderThickness="0,1,0,0" BorderBrush="#FFB9BABC" Height="20">
                          <TextBlock x:Name="PART_TextHint" Text="Cancel" TextTrimming="CharacterEllipsis" Height="Auto" Width="Auto" Margin="2,2,2,3"/>
                        </Border>
                      </Grid>
                    </Border>
                  </Grid>
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="True">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
              <Setter Property="BorderBrush" TargetName="rightBorder" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
              <Setter Property="IsHitTestVisible" TargetName="PART_ToggleButton" Value="False"/>
              <Setter Property="Stroke" TargetName="path" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsOpen" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
              <Setter Property="Stroke" TargetName="path" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
              <Setter Property="Width" TargetName="path" Value="1"/>
              <Setter Property="Margin" TargetName="path" Value="0,-1,-1,-1"/>
            </MultiTrigger>        		
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" SourceName="rightBorder" Value="True"/>
                <Condition Property="IsOpen" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="rightBorder" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
              <Setter Property="BorderBrush" TargetName="rightBorder" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
            </MultiTrigger>
        <Trigger Property="IsEnabled" Value="False">
        					<Setter Property="Opacity" TargetName="iconImage" Value="0.5"/>
          <Setter Property="Effect" TargetName="iconImage">
          <Setter.Value>
            <Fluent:GrayscaleEffect/>
          </Setter.Value>
        </Setter>
        </Trigger>
          </ControlTemplate.Triggers>
</ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>